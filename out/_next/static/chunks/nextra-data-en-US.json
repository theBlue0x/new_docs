{"/_app":{"title":" App","data":{"":""}},"/_app":{"title":" App","data":{"":""}},"/about":{"title":"About","data":{"":"Tipi is an open source personal homeserver orchestrator that enables you to manage and run multiple services on a single server.\nIt is based on Docker and comes with a user-friendly web interface that simplifies service management.\nWith Tipi, you no longer need to worry about manual configuration or networking.\nInstall Tipi on your server and use the web interface to add and manage services.At its core, Tipi is designed to be easy to use and accessible for everyone.\nWhether you are an experienced developer or a beginner, Tipi allows you to focus on the services you want to run without the need for extensive technical knowledge.\nThe project's philosophy is to democratize the ability to self-host services by providing a simple, yet powerful tool that enables everyone to host their own services.Tipi comes with an extensive library of services in the App Store.\nIf you cannot find what you need, you can request new services, and the community can work together to develop them.Tipi is still in its early stages of development, and issues may occur. Nevertheless, the community is continuously working to improve the project, and everyone is welcome to contribute.To get started with Tipi, follow the installation instructions, and enjoy hosting your own services effortlessly."}},"/docs/contributing/adding-a-new-app":{"title":"Adding a new app","data":{"":"In order to proceed you should be familiar working with the Terminal and Git.\nIn this guide, we will explain how to add a new app to the Runtipi App Store. The process is pretty simple and should take you less than 20 minutes.","prerequisites#Prerequisites":"The app you want to add is free and open-source (or at least source available with a permissive license for personal use)\nThe app you want to add has an official and maintained docker image","fork-the-repo#Fork the repo":"In order to open a pull request you need to fork the repo. Visit the official App Store repo and start by clicking the \"Fork\" button in the upper right corner of the page.\nThis will create a new repository with your name and an identical structure to the original repo.","clone-the-repo-locally#Clone the repo locally":"On your computer clone the repo you just forked.\ngit clone https://<your-github-username>/meienberger/runtipi-appstore","create-a-new-branch-for-your-app#Create a new branch for your app":"Navigate to the repoisitory you just cloned.\ncd runtipi-appstore\nCreate a new branch for your app.\ngit checkout -b app/<app-name>","create-the-app-files#Create the app files":"Each app requires at least the following files:\nA docker-compose.yml file to run your app\nA config.json file to configure your app\nA description in markdown format\nA logo in jpg format (512 x 512px)\n\nInside the repo open the apps folder and create a new folder for your app. The name should be the same as the app name without spaces or capital letters.Create a new config.json file inside the newly create folder\n{\n\"name\": \"My super app\",\n\"available\": true,\n\"port\": 8100,\n\"exposable\": true,\n\"id\": \"my-app\", # This should be the same name as the folder\n\"description\": \"\", # Long description of the app\n\"tipi_version\": 1, # Always 1 if you are adding a new app\n\"version\": \"1.25.1\", # The actual version of the app (not the tipi version)\n\"categories\": [\"utilities\"], # One or more categories for the app\n\"short_desc\": \"\", # Short description of the app\n\"author\": \"\", # Link or name of the author\n\"source\": \"\", # Link for git repo\n\"website\": \"\", # Link to the official website\n\"form_fields\": [] # Used to ask for more info to the user before installing. Will be explained further\n}\n\nBe sure to remove the comments from the example above an that the final content is a valid JSON format. You can easily check for validity in an online tool like JSONLint\nAvailable categories : utilities, network, media, development, automation, social, utilities, photography, security, featured, books, data, music, finance, aiOther options for the config.json file are:\nOption\tDescription\tExample value\tforce_expose\tIf set to true, the app will require a domain name.\ttrue\tgenerate_vapid_keys\tIf set to true, the app will generate VAPID keys for web push notifications. VAPID_PUBLIC_KEY and VAPID_PRIVATE_KEY will be available as environment variables\ttrue\turl_suffix\tIf set, the app will be accessible at https://<your-domain>/<url_suffix>\tmy-app\thttps\tIf set to true, the app will be accessible via https only.\ttrue\tno_gui\tSet to true for apps with no GUI. Open button will be hidden\ttrue\tsupported_architectures\tIf the app is only available for a specific architecture, you can specify it here.\t[\"arm64\", \"amd64\"]\nIf you want to add a new category, please open a new issue.When choosing a port, please make sure that it is not in use already. You can check tipi.community/app-db for an updated list. Feel free to let us know if there are any missing ones!In the same folder, create a docker-compose.yml file with your app config.\nversion: \"3.9\"\nservices:\nmy-app: # Should be exact same name as \"id\" field in config.json\ncontainer_name: my-app  # Should be exact same name as \"id\" field in config.json\nimage: my-app:1.0.0 # Try to avoid \"latest\" tag. As it may break configs in the future.\nenvironment:\n- TZ=${TZ} # Can use any env variable. List in runtipi/templates/env-sample\nvolumes:\n- ${APP_DATA_DIR}/data/config:/config # Always start the path with ${APP_DATA_DIR}. This will put all data inside app-data/my-app/data\n- ${APP_DATA_DIR}/data/projects:/projects\nports:\n- ${APP_PORT}:8443\nrestart: unless-stopped\nnetworks:\n- tipi_main_network\nYou'll also need to create a metadata folder and inside put the following files:\ndescription.md - Long description of the app in markdown format. (see other apps for inspiration)\nlogo.jpg - Logo of the app in jpg format (512 x 512px) make sure the logo looks good in the dashboard","user-defined-environment-variables#User defined environment variables":"Sometimes an app is requiring more info to run it such as passwords or username. You can leverage the form_fields property in the config.json file to ask such information. Let's take for example Nextcloud. The image requires a username and password. We can simply add two fields in the config.json that will be presented to the user before installing.\n{\n...\n\"form_fields\": [\n{\n\"type\": \"text\",\n\"label\": \"Username\",\n\"max\": 50,\n\"min\": 3,\n\"required\": true,\n\"env_variable\": \"NEXTCLOUD_ADMIN_USER\"\n},\n{\n\"type\": \"password\",\n\"label\": \"Password\",\n\"max\": 50,\n\"min\": 3,\n\"required\": true,\n\"env_variable\": \"NEXTCLOUD_ADMIN_PASSWORD\"\n}\n]\n}\nYou can choose between different types of fields. The app will automatically validate the user input before submitting.\nType\tDescription\tExample value\ttext\tJust a string of text\tusername\tpassword\tWill be hidden on typing\tpassword\temail\tAn email address\ttest@example.org\tnumber\tAny number\t123\tfqdn\tFully qualified domain name\texample.org\tip\tAny valid ipv4 address\t192.168.2.100\tfqdnip\tCombination between ip and fqdn\t192.168.2.100 or example.org\trandom\tGenerate a random value for the user\t2m3ffc0923rk93df9023f9\tboolean\tA checkbox\ttrue or false\nYou can also define a min and max length of input with the corresponding properties.\nThe env_variable property is the name of the variable you'll use in your docker-compose.yml file. Be sure to have a unique name.\nWhen using the field type random for a password or secret, the min value will be used to determine the length of the string. If the min value is omitted the default length is 32 characters.\nSo if we take the Nextcloud example again, this is how you would use the form_fields inside your compose file.\nversion: \"3.7\"\n\nservices:\nnextcloud:\ncontainer_name: nextcloud\nimage: nextcloud:23.0.3-apache\nrestart: unless-stopped\nports:\n- ${APP_PORT}:80\nvolumes:\n- ${APP_DATA_DIR}/data/nextcloud:/var/www/html\nenvironment:\n- NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}\n- NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}\nNEXTCLOUD_ADMIN_USER and NEXTCLOUD_ADMIN_PASSWORD are coming from the user inputs.","regex-validation#Regex validation":"You can validate a user input against a regex:\n{\n\"env_variable\": \"version\",\n\"label\": \"Version\",\n\"pattern_error\": \"Version must be in the format x.y.z\",\n\"regex\": \"^[0-9]+.[0-9]+.[0-9]+$\",\n\"required\": true,\n\"type\": \"text\"\n}\nThe regex will be tested against the user input. If it doesn't match, the user will see the error message defined in pattern_error.","multi-select#Multi select":"You can also define a multi select field. This will be rendered as a dropdown in the UI.\n{\n\"label\": \"Select your favorite fruits\",\n\"type\": \"text\",\n\"required\": true,\n\"options\": [\n{ \"label\": \"Apple\", \"value\": \"apple\" },\n{ \"label\": \"Banana\", \"value\": \"banana\" },\n{ \"label\": \"Orange\", \"value\": \"orange\" },\n],\n\"env_variable\": \"fruits\"\n}","default-data-folder#Default data folder":"If your app requires default files or configuration, you can easily provide those by creating a data folder beside the app config.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnything placed under data will be copied over app-data/<app-id>/data before installation. Then you can mount those files inside your compose file.\nmy-app:\ncontainer_name: my-app\nrestart: unless-stopped\nvolumes:\n- ${APP_DATA_DIR}/data:/var/lib/config # Will mount the folder with `anything.conf` inside","using-a-template-in-your-data-folder#Using a template in your data folder":"If one of your files requires some dynamic values, you can use a template file. Let's take the example of a config.ini file that requires the APP_PORT variable.\n[my-app]\nport = {{APP_PORT}}\nIf you name your file config.ini.template, it will automatically replace the variables with the values defined in the environment variables.For example if you put the previous example in data/config.ini.template, it will be copied over to app-data/<app-id>/data/config.ini with the APP_PORT variable replaced.","commit-your-changes#Commit your changes":"Once you're done, you can commit your changes to the repository.\ngit add .\ngit commit -m \"Add my-app\"\ngit push origin master","submit-a-pull-request#Submit a Pull Request":"You can now submit a pull request to the repository.\nOn GitHub, visit your repository and click on the \"Pull requests\" tab.\nClick on \"New pull request\" and fill in the title and description.\nChoose your branch and target the main repository at meienberger/runtipi-appstore.","test-your-app-in-your-own-instance#Test your app in your own instance":"Before submitting your app, you can test it in your own instance. You can do so by adding your app repository to the appsRepoUrl property in the settings.json file.\nVisit the Using your own appstore repo section to learn more."}},"/docs/contributing/running-locally":{"title":"Running locally","data":{"":"In this guide we will show you how to run Tipi locally on your machine. This is useful if you want to contribute to the project or if you want to test new apps you added to the appstore.","prerequisites#Prerequisites":"Docker desktop up to date and running. Instructions: Install Docker Engine\nDocker-compose\nNode version 16+","prepare#Prepare":"Once you have forked the repo and cloned it on your local machine you can start to prepare the environment.","install-dependencies#Install dependencies":"Tipi uses pnpm as a package manager and monorepo orchestrator. Install it with\nnpm i -g pnpmInstall the project dependencies\npnpm i","run-tipi#Run Tipi":"Start the app with npm run start:dev from the root folder\nVisit localhost:3000 in your browser","stopping#Stopping":"When you have finished developing and stopped the server, the apps you've installed will still be running in their containers. To stop them and remove the images run:\nsudo ./scripts/stop.sh","using-your-own-appstore-repo#Using your own appstore repo":"You can change the repository Tipi is using to retrieve the appstore in order to test new apps you added.Create a settings.json file in the state folder (runtipi/state/settings.json) containing the URL of your repo and restart Tipi.\n{\n\"appsRepoUrl\": \"https://github.com/meienberger/runtipi-appstore.git\"\n}\nIf you need to be on a different branch than the main one in your repo, go in the repository directory cd ./repos/<generated-id> and checkout your branch.\ngit checkout mybranch"}},"/docs/getting-started/custom-settings":{"title":"Custom settings","data":{"":"You can change the default settings by creating a settings.json file. The file should be located in the runtipi/state directory. This file will make your changes persist across restarts. Example file:\n{\n\"dnsIp\": \"9.9.9.9\",\n\"domain\": \"mydomain.com\"\n}\n\nBe sure that the content is a valid JSON format. You can easily check for validity in an online tool like JSONLint","available-settings#Available settings:":"Parameter\tDescription\tDefault value\tdnsIp\tThe IP address of the DNS server to use\t9.9.9.9\tdomain\tThe domain name to use for the dashboard\tlocalhost\tport\tThe port to use for the dashboard\t80\tsslPort\tThe port to use for the dashboard with SSL\t443\tlistenIp\tThe IP address to listen on\tautomatically detected\tstoragePath\tThe path to use for storing data\truntipi/app-data\tlocalDomain\tThe domain name to use for local services\ttipi.lan"}},"/docs/getting-started/installation":{"title":"Installation","data":{"":"","requirements#Requirements":"Ubuntu 18.04 LTS or higher is recommended. However other major Linux distribution are supported but may lead to installation issues. Please file an issue if you encounter one.If Docker is already installed on your machine, Tipi will use it to run the dashboard. Otherwise, it will install Docker for you.\nIf you already have docker installed make sure to have the docker compose plugin installed.\nRun docker compose version to check if it is installed. Instructions to install it can be found here.","download-and-install-tipi#Download and install Tipi":"Download the latest version of Tipi:\ncurl -L https://setup.runtipi.io | bash\nIf you have some issue with the command above, you can also download the script directly from github:\ncurl -L https://raw.githubusercontent.com/meienberger/runtipi/master/scripts/install.sh | bash\nThe script will prompt you the ip address of the dashboard once configured.","commands#Commands":"If you already installed Tipi, you can start it manually by running the start.sh script in the runtipi folder.\ncd runtipi\nsudo ./scripts/start.sh\nTipi will run by default on port 80. To select another port you can create a settings.json file in the state folder.\nSee the Custom Settings section for more information.To stop Tipi, run the stop script.\nsudo ./scripts/stop.sh","update-tipi#Update Tipi":"To update Tipi to the latest version, run the update script.\nsudo ./scripts/system.sh update"}},"/docs/guides/customize-app-config":{"title":"Customize app config","data":{"":"","overview#Overview":"In this guide, we'll show you how to customize the configuration of an app by overriding the default docker-compose.yml and app.env files.","example-use-cases#Example use cases":"Set Pihole to listen on a custom IP address\nMount an existing volume on your host into a media app such as Jellyfin. By default, media apps will only be able to see files within runtipi/media, but you can add other volumes.\n\nAn alternative approach to mounting a volume into an app would be to symlink your host volume into runtipi/media. However, that would make it visible to all apps that mount the media folder, which may not be desirable.","create-custom-docker-config#Create custom docker config":"In this example we're going to add environment variables to the Pihole app and mount the /cellar volume into the Jellyfin app.To determine how to set environment variables to customize the Pihole container, we look at runtipi/apps/pihole/docker-compose.yml:\nports:\n- ${NETWORK_INTERFACE:-0.0.0.0}:53:53/tcp\n- ${NETWORK_INTERFACE:-0.0.0.0}:53:53/udp\n- ${NETWORK_INTERFACE:-0.0.0.0}:${APP_PORT}:80\nFrom this, we know that we need to set the NETWORK_INTERFACE variable.\nDon't edit the files in the apps folder directly; they will be overwritten on update.\n\nCreate user-config folder within runtipi and a folder for each app:\n\n\ncd runtipi\nmkdir user-config\nmkdir user-config/jellyfin\nmkdir user-config/pihole\n\nCreate a docker-compose.yml for jellyfin and add this content:\n\n\ntouch user-config/jellyfin/docker-compose.yml\nnano user-config/jellyfin/docker-compose.yml\n\nversion: \"3.7\"\nservices:\njellyfin:\nvolumes:\n- /cellar:/cellar\n\nReplace /cellar with the volume you want to mount.\n\nCreate an app.env for pihole and add this content:\n\n\ntouch user-config/pihole/app.env\nnano user-config/pihole/app.env\n\nNETWORK_INTERFACE=10.20.0.53\n\nReplace 10.20.0.53 with the IP address you want pihole to listen on.\n\nYou should end up with a structure like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRestart the apps and test:\n\n\n./scripts/app.sh stop jellyfin\n./scripts/app.sh stop pihole\n./scripts/app.sh start jellyfin\n./scripts/app.sh start pihole\n\nTest Jellyfin by opening the app and configuring a library. You should now see your mounted volume.\nTest Pihole with a DNS query to the new IP address:\n\n\nnslookup google.com 10.20.0.53\n\nServer:         10.20.0.53\nAddress:        10.20.0.53#53\n\nNon-authoritative answer:\nName:   google.com\nAddress: 142.250.200.46\nName:   google.com\nAddress: 2a00:1450:4009:822::200e"}},"/docs/guides/expose-apps-with-cloudflare-tunnels":{"title":"Expose your apps using Cloudflare tunnels","data":{"":"Cloudflare Tunnels allow you to expose your local web server to the internet without having to configure any firewall rules or DNS records.\nAditionnally your IP address will be hidden behind Cloudflare's network as requests will be proxied through Cloudflare's edge network.Cloudflare tunnels are available for free for all Cloudflare users.","pre-requisites#Pre-requisites":"A Cloudflare account sign up here\nA domain name\nA tipi instance running on your local network","use-case#Use case":"You want to expose to the internet the searxng instance running on your Tipi.","configuration#Configuration":"","add-your-domain-to-cloudflare#Add your domain to Cloudflare":"In the Cloudflare dashboard, go to the Website tab and click on the Add site button.\nEnter your domain name and click on Add site.\nScroll down a little bit and choose the Free plan option.\n\nClick on Continue and then on Continue again.","add-cloudflares-nameservers-to-your-domain#Add Cloudflare's nameservers to your domain":"Copy the nameservers presented in the Cloudflare dashboard and add them to your domain's DNS settings.\nDepending on your domain registrar, you may need to add them as NS records or Name Server records.\n\nThis step may take a few minutes to propagate.","create-a-tunnel#Create a tunnel":"In the Cloudflare dashboard, go to the Zero Trust tab and click on Access -> Tunnels.\n\n\n\nClick on the Create a tunnel button.Give your tunnel a name and click on Save tunnel.","run-the-connector-on-your-server#Run the connector on your server":"Click on Docker and copy the command presented in the dashboard.\nSSH into your Tipi server and run the command copied from the Cloudflare dashboard.\nYou can add the -d flag to run it in the background.\ndocker run -d ...\nYou should now see the tunnel running in the dashboard.","add-a-public-hostname-to-your-tunnel#Add a Public hostname to your tunnel":"Select your newly created tunnel, configure and click on the Public hostname tab.Click on Add a public hostnameFill out the form by entering the subdomain you want (e.g. searxng) and select your domain name from the dropdown.\nIn the service section, choose the type HTTPS and in URL enter the IP address of your Tipi server.In the additional settings section, choose the No TLS Verfiy option.\n\n\n\nClick on Save hostname.","expose-your-app-on-tipi#Expose your app on Tipi":"Open your Tipi dashboard and search for the app you want to expose.\nMake sure the app is stopped and click on the settings button.Enable the Expose app option and enter the subdomain you chose earlier.\n\n\n\nClick on Save and then start the app again.","access-your-app#Access your app":"You can now access your app securely by visiting https://<subdomain>.<domain>."}},"/docs/guides/linking-a-domain-to-your-dashboard":{"title":"Lining a domain to your dashboard","data":{"":"This guide explains you how to link a domain to your dashboard. If you want to expose other apps, you need to configure them individually. You cannot use the --domain option to expose individual apps.\nIf you want to link a domain to your dashboard, you can do so by providing the --domain option in the start script.\nsudo ./scripts/start.sh --domain mydomain.com\nYou can also specify it in the settings.json file as shown in the previous section to keep the setting saved across restarts.\n{\n\"domain\": \"mydomain.com\"\n}\nA Let's Encrypt certificate will be generated and installed automatically. Make sure to have ports 80 and 443 open on your firewall and that your domain has an A record pointing to your server IP.Please note that this setting will only expose the dashboard. If you want to expose other apps, you need to configure them individually. You cannot use the --domain option to expose apps.This option will only work if you keep the default port 80 and 443 for the dashboard."}},"/docs/guides/expose-your-apps":{"title":"Expose Your Apps","data":{"":"This page is a stub. Help us expand it by contributing!"}},"/docs/guides/local-certificate":{"title":"Local SSL certificate","data":{"":"Requried Tipi version: >= 1.5.0","introduction#Introduction":"With Tipi you can access your dashboard and apps locally using a secure connection. When installing Tipi, a self-signed SSL certificate is generated for you.The default domain for the certificate is tipi.lan. You can change this domain in the settings page of the dashboard. Or by giving the localDomain value in your settings.json file.\nSee the custom-settings section for more information.","trusting-the-certificate#Trusting the certificate":"To be able to use the certificate, you need to trust it. This is done by adding the certificate to your operating system's trust store.\nFirst you need to export the certificate from the Tipi dashboard. You can do this by clicking the Download certificate button in the settings page of the dashboard. (below the Local domain input field)","windows#Windows":"Open the Start menu and type certmgr.msc and press Enter.\nIn the left pane, click Trusted Root Certification Authorities.\nIn the right pane, click Certificates.\nOn the Action menu, point to All Tasks, and then click Import.\nFollow the instructions in the Certificate Import Wizard to import the certificate.","macos#macOS":"Open the Keychain Access app.\nClick File > Import Items.\nSelect the certificate file and click Open.\nDouble-click the certificate file.\nExpand the Trust section.\nChange the When using this certificate option to Always Trust.","linux#Linux":"Copy the certificate file to /usr/local/share/ca-certificates/.\nRun sudo update-ca-certificates.","dns-resolution#DNS resolution":"To be able to access your dashboard and apps using the local domain, you need to make sure that the domain resolves to the IP address of your Tipi server.The easiest way to do this is by running a DNS server on your network and adding the domain to it.\nYou can use Pi-hole or AdGuard Home for this. Both are available as apps in the Tipi App store.For example using AdGuard Home you can add the domain to the DNS rewrites section of the app.\nDon't forget to add the wildcard domain *.tipi.lan to the DNS rewrites section in order to be able to access your apps as well.\n\n\n\n\nIf you don't have a DNS server running on your network, you can add the domain to the hosts file on your computer.\nBy using this method you need to do this on every device you want to access your dashboard and apps from and for every domain you want to use. (e.g. tipi.lan, app1.tipi.lan, app2.tipi.lan)","windows-1#Windows":"Open the Start menu and type Notepad and press Enter.\nClick File > Open.\nNavigate to C:\\Windows\\System32\\drivers\\etc.\nChange the file filter to All Files (*.*).\nSelect hosts and click Open.\nAdd the following line to the end of the file:\n<ip-address> <domain>.\nSave the file.","macos--linux#macOS / Linux":"Open the Terminal app.\nRun sudo nano /etc/hosts.\nAdd the following line to the end of the file: <ip-address> <domain>.\nPress Ctrl + X to exit.\nPress Y to save the file.\nPress Enter to confirm the file name."}},"/docs/guides/start-on-system-boot":{"title":"Start on System Boot","data":{"":"In this section, we'll cover how to configure Tipi to start on system boot.\nThese steps assume a systemd distro (the majority of common Linux distributions use systemd as the init manager). To determine whether your system uses systemd, run the command sudo systemctl status - if it displays a tree of daemons, you have systemd.","add-tipi-to-systemd#Add Tipi to systemd":"","create-a-service-configuration-file#Create a service configuration file":"Create the file in /etc/systemd/system:\nsudo touch /etc/systemd/system/tipi.service\n\nThis path may vary according to your distribution.","edit-the-file#Edit the file":"sudo nano /etc/systemd/system/tipi.service, and paste in this config:\n[Unit]\nDescription=tipi\nRequires=docker.service multi-user.target\nAfter=docker.service network-online.target dhcpd.service\n\n[Service]\nRestart=always\nRemainAfterExit=yes\nWorkingDirectory=/usr/bin/runtipi\nExecStart=/usr/bin/runtipi/scripts/start.sh\nExecStop=/usr/bin/runtipi/scripts/stop.sh\n\n[Install]\nWantedBy=multi-user.target\n\nReplace /usr/bin/runtipi with the full path to wherever you installed Tipi.","update-the-systemd-configuration#Update the systemd configuration:":"sudo systemctl daemon-reload","enable-the-service#Enable the service:":"sudo systemctl enable tipi","test-the-service-configuration#Test the service configuration:":"sudo systemctl status tipi\n\n● foo.service - foo\nLoaded: loaded (/etc/systemd/system/tipi.service; disabled; vendor preset: enabled)\nActive: inactive (dead)","reboot-your-system#Reboot your system":"Test that Tipi starts up. If this all worked, you should now be able to manage tipi with systemctl:\nsudo systemctl status tipi\n\n● tipi.service - tipi\nLoaded: loaded (/etc/systemd/system/tipi.service; enabled; vendor preset: enabled)\nActive: active (exited) since Wed 2023-02-22 00:43:34 GMT; 4 days ago\nMain PID: 11537 (code=exited, status=0/SUCCESS)\nTasks: 1 (limit: 4915)\nCPU: 4d 11h 24min 33.300s\nCGroup: /system.slice/tipi.service\n└─11647 fswatch -0 /usr/bin/runtipi/state/events"}},"/docs/guides/uninstalling":{"title":"Uninstalling","data":{"":"Make sure Tipi is completely stopped and then remove the runtipi directory.\nsudo ./scripts/stop.sh\ncd ..\nsudo rm -rf runtipi"}},"/docs/guides/updating":{"title":"Updating","data":{"":"To update Tipi to the latest version, run the following command from the runtipi directory:\nsudo ./scripts/system.sh update"}},"/docs/introduction":{"title":"Introduction","data":{"":"These docs are highly incomplete and are a continuous work in progress. Please help us by contributing to the project or by providing feedback.\nTipi is an open source personal homeserver orchestrator that enables you to manage and run multiple services on a single server.\nIt is based on Docker and comes with a user-friendly web interface that simplifies service management.\nWith Tipi, you no longer need to worry about manual configuration or networking.\nInstall Tipi on your server and use the web interface to add and manage services.At its core, Tipi is designed to be easy to use and accessible for everyone.\nWhether you are an experienced developer or a beginner, Tipi allows you to focus on the services you want to run without the need for extensive technical knowledge.\nThe project's philosophy is to democratize the ability to self-host services by providing a simple, yet powerful tool that enables everyone to host their own services.Tipi comes with an extensive library of services in the App Store.\nIf you cannot find what you need, you can request new services, and the community can work together to develop them.Tipi is still in its early stages of development, and issues may occur. Nevertheless, the community is continuously working to improve the project, and everyone is welcome to contribute.To get started with Tipi, follow the installation instructions, and enjoy hosting your own services effortlessly."}},"/docs/reference/architecture":{"title":"Architecture","data":{"":"","overview#Overview":"","technologies#Technologies":"Runtipi is built using a modern web architecture and emphasizes on end-to-end type safety. The following technologies are used:\nTraefik - Reverse proxy and load balancer\nDocker - Containerization\nTypeScript - Typed superset of JavaScript\nNext.js - React framework for server-side rendering and static site generation\ntRPC - Type safe API layer\nPrisma - Database toolkit\nPostgreSQL - Database","reverse-proxy#Reverse Proxy":"Traefik is used as a reverse proxy and load balancer. It is configured to automatically detect new services and configure them to receive traffic from the internet.\nEach service is automatically configured to be able to receive an SSL certificate from Let's Encrypt using the HTTP Challenge.","applications#Applications":"Docker is used to containerize the application. Each service is built into a Docker image and deployed using Docker Compose.\nEach app you install is deployed as a separate Docker Compose project. This allows you to easily manage each app independently.\nAll apps are deployed to the same network, allowing them to communicate with each other."}},"/docs/reference/folder-structure":{"title":"Folder Structure","data":{"":"In this section, we will describe the folder structure of the project.\nHere is a look at the folder structure after installation:","apps#Apps":"The apps folder contains all the apps that are installed on the device.\nEach app is a folder with the app name. The app folder contains the app's config file and it's docker-compose.yml file.You can edit the config file to change the app's settings. However, those changes will be overwritten when the app is updated.\nIf you want to make permanent changes to the app, look at the Customize app config section.","app-data#App Data":"The app-data folder contains all the data of the apps.\nIt is the default location if there is no storagePath defined in the settings.json file (see Custom settings)\nEach app has it's own folder with the app name. And all the data of the app is stored in this folder. (e.g. app-data/nextcloud/data)","logs#Logs":"The logs folder contains all the logs of the apps. The logs are seperated into 3 files\n\n\n\n\n\n\n\n\n\nThe error.log file contains all the errors that are thrown by the app. The app.log file contains all the logs that are printed by the app.\nAnd the script.log file contains all the logs that are printed by the app's scripts (like app.sh) file.","media#Media":"The media folder contains all the media files that are uploaded to the device. (e.g. images, videos, etc.)\nmedia folder is an exception to the rule that all the data is stored in the app-data folder.\nThis is because the media files are not app specific and can be used by multiple apps.\nFor example the *arrs apps use the media folder to store the downloaded media files.","repos#Repos":"The repos folder contains the app store repositories. Each repository is a folder with the repository id.\nIf add a custom repository in your settings.json file, it will be downloaded to this folder and consumed by the dashboard.","scripts#Scripts":"The scripts folder contains all the scripts that are used by Tipi. If you need to execute a script, you can do it by running scripts/<script-name>.sh.","state#State":"The state folder contains the state of your instance. It contains the settings.json file which contains the custom settings of the installation alongside some other files necessary for Tipi to run."}},"/":{"title":"Runtipi | Homeserver management made easy","data":{"":""}},"/_app":{"title":" App","data":{"":""}},"/docs/apps-available":{"title":"Apps available","data":{"":"Tipi has a wide range of selfhosted apps you can install on your server. You can find them all in the app store repo and make requests for new apps there."}}}